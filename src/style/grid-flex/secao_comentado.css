.secao {
	display: grid;
	align-items: end;
	/*
		A propriedade `align-items: end;` é a responsável por alinhar os itens do grid à parte inferior das células.
		Ao aplicar essa propriedade à classe `.secao-imagens`, você garante que todas as imagens, independentemente da altura da célula, fiquem alinhadas na parte inferior.
	*/

	row-gap: 2em;
}

.secao-horizontal, .secao-vertical {
	grid-template-rows: 70px auto;
}

.secao-horizontal .secao__cartoes {
	/*
		Como a class 'secao__cartoes' está também presente nas outras classes (de seção vertical) e não se deseja aplicar o mesmo estilo para as 'verticais' então usar as classes
			`.secao-horizontal .secao__cartoes`

			Quando você escreve .secao-horizontal .secao__cartoes no CSS, está selecionando todos os elementos com a classe secao__cartoes que são descendentes (em qualquer nível) de um elemento com a classe secao-horizontal. Isso permite uma estilização mais específica e controlada dos elementos na página.
	*/
	display: grid;

	grid-template-columns: repeat(auto-fit, 200px);
	/*
		A propriedade grid-template-columns define a largura das colunas em um grid.
		A função repeat pode ser usada para criar um número repetido de colunas com um determinado tamanho.

		repeat(auto-fit, 200px):
			repeat: A função repeat permite criar um número de colunas baseado em um padrão repetido.
			
			auto-fit: Isso indica que o grid deve criar tantas colunas de 200px quanto possível dentro do container, ajustando-se automaticamente ao tamanho do container. Se o espaço disponível não permitir mais colunas de 200px, o grid ajustará a quantidade de colunas visíveis para caber no espaço disponível.
			Sempre se ajustando ao espaço disponível.

			200px: Define a largura fixa de cada coluna em 200px.
	*/

	grid-template-columns: repeat(auto-fit, minmax(min(80%/2, max(350px, 80%/3)), 1fr));
	/*
		A propriedade grid-template-columns: repeat(auto-fit, minmax(min(80%/2, max(350px, 80%/3)), 1fr)); passo a passo para entender como ela funciona. Esta propriedade usa funções CSS avançadas para criar um layout de grid responsivo e adaptável.
	
		repeat(auto-fit, ...):
			repeat: A função repeat cria um número repetido de colunas.
			auto-fit: Isso faz com que o grid se ajuste automaticamente, criando tantas colunas quanto couberem no container.

		minmax(min(80%/2, max(350px, 80%/3)), 1fr):
			minmax(min(...), 1fr): Define um intervalo de tamanho mínimo e máximo para as colunas.
			min(80%/2, max(350px, 80%/3)): Vamos quebrar essa parte em pedaços menores para entender melhor.

		min(80%/2, max(350px, 80%/3))
			80%/2: Metade de 80% da largura do container. Isto dá 40% da largura do container.
			max(350px, 80%/3):
				350px: Um valor fixo de 350 pixels.
				80%/3: Um terço de 80% da largura do container. Isto dá aproximadamente 26.67% da largura do container.
				max(350px, 80%/3): O maior valor entre 350px e 26.67% da largura do container.
		min(80%/2, max(350px, 80%/3)): O menor valor entre 40% da largura do container e o resultado do max(350px, 80%/3).

		Resumo da Propriedade
			repeat(auto-fit, minmax(...)): Cria tantas colunas quanto couberem no container.
			minmax(min(80%/2, max(350px, 80%/3)), 1fr): Cada coluna terá um tamanho mínimo e máximo definido dinamicamente:
			O tamanho mínimo é o menor valor entre 40% da largura do container e o maior valor entre 350px e 26.67% da largura do container.
			O tamanho máximo é 1 fração do espaço disponível (1fr), permitindo que a coluna ocupe todo o espaço disponível se houver espaço suficiente.
	*/
}

.secao-vertical {
	grid-template-columns: 1fr auto;
}

.secao-vertical .secao__cartoes {
	display: grid;
	grid-auto-flow: column;
	/*
		A propriedade grid-auto-flow no CSS controla como os itens são colocados no grid. Ela determina a direção e o preenchimento automático das células do grid quando os itens são adicionados

		grid-auto-flow: row | column | dense | row dense | column dense;

		Valores Possíveis:
			row (padrão): Preenche o grid na direção das linhas. Itens são colocados da esquerda para a direita e depois de cima para baixo.
			column: Preenche o grid na direção das colunas. Itens são colocados de cima para baixo e depois da esquerda para a direita.
			dense: Tenta preencher os buracos no grid de forma mais compacta, movendo itens para preencher espaços vazios.
			row dense: Combinação de row e dense.
			column dense: Combinação de column e dense
	*/
}


.secao-vertical .secao__cartoes .cartao a {
	display: flex;
	flex-direction: column;
	height: 100%;
}

.secao-vertical .secao__cartoes .cartao__titulo {
	flex-grow: 1;
	/*
		A propriedade flex-grow é usada no contexto do Flexbox no CSS e determina a capacidade de um item flexível (flex item) de crescer para ocupar o espaço disponível no contêiner flexível (flex container). Vamos analisar o que a propriedade flex-grow: 1; faz e como ela funciona.
	*/
}